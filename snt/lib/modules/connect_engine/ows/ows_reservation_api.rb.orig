class OwsReservationApi < OwsApi
  def self.get_booking(hotel_id, confirm_no)
    reservation_service = OwsReservationService.new(hotel_id)

    message = OwsMessage.new
    message.append_confirmation_number(confirm_no)
    message.append_hotel_reference(hotel_id)
    message.append_use_vault()

    response = reservation_service.fetch_booking(message)

    # Get operation response
    operation_response = response.xpath('//FetchBookingResponse')
   
    handle_response operation_response, lambda {
      OwsCommonApi.parse_booking_response(hotel_id, confirm_no, operation_response)
    }

<<<<<<< HEAD
    if operation_response
      # Hotel Reservation Tag
      hotel_reservation_tag = operation_response.xpath('HotelReservation')

      if hotel_reservation_tag

        if hotel_reservation_tag.xpath('@computedReservationStatus').text == 'RESERVED' && hotel_reservation_tag.xpath('@reservationStatus').text == 'INHOUSE'
          booking[:status] = hotel_reservation_tag.xpath('@reservationStatus').text
        else
          booking[:status] = hotel_reservation_tag.xpath('@computedReservationStatus').text
        end

        market_segment = hotel_reservation_tag.xpath('@marketSegment').text

        # Room Stay Tag
        room_stay_tag = hotel_reservation_tag.xpath('RoomStays/RoomStay[1]')

        booking[:arrival_date] = Date.parse(room_stay_tag.xpath('TimeSpan/StartDate').text)

        booking[:dep_date] = Date.parse(room_stay_tag.xpath('TimeSpan/EndDate').text)
        booking[:guarantee_type] = room_stay_tag.xpath('Guarantee/@guaranteeType').text
        booking[:total_amount] = room_stay_tag.xpath('Total').text

        # Rate Plans
       booking[:rate_code] = room_stay_tag.xpath('RatePlans/RatePlan[1]/@ratePlanCode').text
        rate_plans = []
        room_stay_tag.xpath('RatePlans/RatePlan').each do |rate_plan_tag|
          rate_plans << {
            :rate_code => rate_plan_tag.xpath('@ratePlanCode').text,
            :market_segment => market_segment,
            :rate_desc => rate_plan_tag.xpath('RatePlanDescription/Text').text
          }
        end


        packages = []
        room_stay_tag.xpath('Packages/Package').each do |package_tag|
          packages << {
            :package_code => package_tag.xpath('@packageCode').text,
            :source => package_tag.xpath('@source').text,
            :description =>package_tag.xpath('Description/Text/TextElement').text,
            :package_amount =>
            {
              :currency_code => package_tag.xpath('PackageAmount/@currencyCode').text,
              :amount => package_tag.xpath('PackageAmount').text,
              :decimals =>package_tag.xpath('PackageAmount/@decimals').text
            },
            :tax_amount =>{
              :currency_code => package_tag.xpath('TaxAmount/@currencyCode').text,
              :amount => package_tag.xpath('TaxAmount').text,
              :decimals =>package_tag.xpath('TaxAmount/@decimals').text
            },
            :allowance =>{
              :currency_code => package_tag.xpath('Allowance/@currencyCode').text,
              :amount => package_tag.xpath('Allowance').text,
              :decimals =>package_tag.xpath('Allowance/@decimals').text
            }
          }
        end
        booking[:packages] = packages

        # Room Types
        room_types = []
        room_stay_tag.xpath('RoomTypes/RoomType').each do |room_type_tag|
          room_types << {
            :room_type => room_type_tag.xpath('@roomTypeCode').text,
            :no_of_rooms => room_type_tag.xpath('@numberOfUnits').text,
            :description => room_type_tag.xpath('RoomTypeDescription/Text').text,
            :room => room_type_tag.xpath('RoomNumber').text
          }
        end

        # Expected Charges Tag
        expected_charges = []
        room_stay_tag.xpath('ExpectedCharges/ChargesForPostingDate').each do |charges_tag|
          expected_charge = {
            :reservation_date => Date.parse(charges_tag.xpath('@PostingDate').text),
            :rates => [],
            :taxes_and_fees => []
          }

          charges_tag.xpath('RoomRateAndPackages/Charges').each do |charge_tag|
            amount_tag = charge_tag.xpath('Amount')

            expected_charge[:rates] << {
              :description => charge_tag.xpath('Description').text,
              :currency_code => amount_tag.xpath('@currencyCode').text,
              :amount => amount_tag.text
            }
          end

          charges_tag.xpath('TaxesAndFees/Charges').each do |charge_tag|
            amount_tag = charge_tag.xpath('Amount')

            expected_charge[:taxes_and_fees] << {
              :description => charge_tag.xpath('Description').text,
              :currency_code => amount_tag.xpath('@currencyCode').text,
              :amount => amount_tag.text
            }
          end

          expected_charges << expected_charge
        end

        # Room Rates
        rates = []
        room_stay_tag.xpath('RoomRates/RoomRate').each do |room_rate_tag|
          room_type = room_types.select { |type| type[:room_type] == room_rate_tag.xpath('@roomTypeCode').text }.first
          rate_plan = rate_plans.select { |plan| plan[:rate_code] == room_rate_tag.xpath('@ratePlanCode').text }.first

          # Rates
          room_rate_tag.xpath('Rates/Rate[1]').each do |rate_tag|
            rates << {
              :room_type_info => room_type ? room_type : {:code => room_rate_tag.xpath('@roomTypeCode').text},
              :rate_info => rate_plan ? rate_plan : {:rate_code => room_rate_tag.xpath('@ratePlanCode').text},
              :reservation_date => rate_tag.xpath('@effectiveDate').present? ? Date.parse(rate_tag.xpath('@effectiveDate').text) : booking[:arrival_date],
              :currency_code => rate_tag.xpath('Base/@currencyCode').text,
              :rate_amount => rate_tag.xpath('Base').text,
              :room => room_type ? room_type[:room] : nil
            }
          end
        end

        # Guest Counts
        adults = room_stay_tag.xpath('GuestCounts/GuestCount[@ageQualifyingCode="ADULT"]/@count').text
        children = room_stay_tag.xpath('GuestCounts/GuestCount[@ageQualifyingCode="CHILD"]/@count').text

        # Setup Daily Instances
        booking[:daily_instances] = []
        (booking[:arrival_date]..booking[:dep_date]).each do |day|

        # Get the last rate with a reservation date less than or equal to the day
          rate = rates.select { |r| r[:reservation_date] <= day }.last

          # Clone the daily instance information from the rate information
          daily_instance = rate.clone

          # Set the details daily instance
          daily_instance[:reservation_date] = day
          daily_instance[:market_segment] = market_segment
          daily_instance[:adults] = adults
          daily_instance[:children] = children

          # Get the last expected charge with a reservation date less than or equal to the day
          daily_instance[:expected_charge] = expected_charges.select { |charge| charge[:reservation_date] <= day }.last

          booking[:daily_instances] << daily_instance
        end

        # Hotel Reference Tag
        booking[:chain_code] = room_stay_tag.xpath('HotelReference/@chainCode').text
        booking[:hotel_code] = room_stay_tag.xpath('HotelReference/@hotelCode').text

        # Notes
        booking[:notes] = []
        room_stay_tag.xpath('Comments.Comment').each do |comment_tag|
          booking[:notes] << comment_tag.xpath('Text').text
        end

        #Payment Type (Credit Card)
        room_stay_tag.xpath('//GuaranteeCreditCard[1]').each do |credit_card_tag|
          mapped_card_type = ExternalMapping.map_external_value(hotel_id, credit_card_tag.xpath('@cardType').text, Setting.mapping_types[:credit_card_type])

          booking[:payment_type] = {              
            :card_name => credit_card_tag.xpath('cardHolderName').text,
            :mli_token => credit_card_tag.xpath('VaultedCardData/@vaultedCardID').text,
            :credit_card_type => mapped_card_type,
            :card_expiry => credit_card_tag.xpath('expirationDate').text                     
          }      
        end

        # Reservation Preferences
        booking[:features] = []
        hotel_reservation_tag.xpath('Preferences/Preference[@otherPreferenceType="RESERVATION"]').each do |preference_tag|
          booking[:features] << {
            :type => preference_tag.xpath('@preferenceType').text,
            :value => preference_tag.xpath('@preferenceValue').text
          }
        end

        # Guest Tag
        hotel_reservation_tag.xpath('ResGuests/ResGuest[1]/Profiles/Profile[1]').each do |profile_tag|
          booking[:guest] = OwsCommonApi.parse_guest_response(hotel_id, profile_tag)

          # If a membership is used in the reservation, set the booking membership
          booking[:membership] = booking[:guest][:memberships].select { |membership| membership[:used_in_reservation] }.first
        end
      end
    end

    handle_response(operation_response, booking)
=======
>>>>>>> 20350093e353255677d19f8a84d0c9b3becae197
  end

  # call to checkin the reservation
  def self.check_in(hotel_id, resv_name_id)
    reservation_service = OwsResvAdvancedService.new(hotel_id)

    message = OwsMessage.new
    message.append_reservation_request(hotel_id, resv_name_id)
    #message.append_key_info(key_track, no_of_keys, key_encoder)
    #message.append_reg_card(print_reg_card)
    #message.append_approval_code(approval_code)
    message.append_kiosk_info(false)

    response = reservation_service.check_in(message)

    # Get operation response
    operation_response = response.xpath('//CheckInResponse')

    handle_response operation_response, lambda {
      OwsCommonApi.parse_checkin_response(hotel_id, operation_response.xpath('CheckInComplete'))
    }
  end

  # Assigns the room number for a reservation
  def self.assign_room(hotel_id, external_id, room_no)
    reservation_service = OwsReservationService.new(hotel_id)

    message = OwsMessage.new
    message.append_hotel_reference(hotel_id)
    message.append_resv_name_id(external_id)
    message.append_room_no_requested(room_no)

    response = reservation_service.assign_room(message)
    operation_response = response.xpath('//AssignRoomResponse')

    handle_response operation_response, lambda {
      {:room_assigned => operation_response.xpath('RoomNoAssigned').text}
    }
  end

  # Releases the room number for a reservation
  def self.release_room(hotel_id, external_id)
    reservation_service = OwsReservationService.new(hotel_id)

    message = OwsMessage.new
    message.append_hotel_reference(hotel_id)
    message.append_resv_name_id(external_id)

    response = reservation_service.release_room(message)
    operation_response = response.xpath('//ReleaseRoomResponse')

    handle_response(operation_response)
  end

  # Method to add or update wake up calls
  def self.add_wakeup_calls(wakeup_calls_data, action)
    guest_service = OwsGuestServices.new(wakeup_calls_data[:hotel_id])
    wakeup_calls = {}

    message = OwsMessage.new
    message.append_hotel_reference(wakeup_calls_data[:hotel_id])
    message.append_resv_name_id_internal(wakeup_calls_data[:external_id])
    message.append_room_no_tag(wakeup_calls_data[:room_no])
    if action != "FETCH"
    message.append_wake_up_call_details(wakeup_calls_data)
    end
    message.append_wake_up_action(action)
    # call method wake up call to external pms
    response = guest_service.wake_up_call(message)

    # Get operation response
    operation_response = response.xpath('//WakeUpCallResponse')

    handle_response operation_response, lambda {
      OwsCommonApi.parse_checkin_response(wakeup_calls_data[:hotel_id], operation_response.xpath('Result'))
    }
  end

  # call to check-out the reservation
  def self.check_out(hotel_id, external_id, email_folio)
    reservation_service = OwsResvAdvancedService.new(hotel_id)

    check_out_guest = {}
    message = OwsMessage.new
    message.append_reservation_request(hotel_id, external_id)
    if email_folio
    message.append_email_folio(email_folio)
    end
    message.append_kiosk_info(false)
    response = reservation_service.check_out(message)

    # Get operation response
    operation_response = response.xpath('//CheckOutResponse')

    handle_response operation_response, lambda {
      OwsCommonApi.parse_check_out_response(hotel_id, operation_response.xpath('CheckOutComplete'))
    }
  end

  # Calls OWS modify_booking for changed reservation information
  def self.modify_booking(hotel_id, confirm_no, changed_attributes)
    reservation_service = OwsReservationService.new(hotel_id)

    message = OwsMessage.new
    message.append_changed_booking_attributes(hotel_id, confirm_no, changed_attributes)

    response = reservation_service.modify_booking(message)
    operation_response = response.xpath('//ModifyBookingResponse')

    handle_response operation_response, lambda {
      OwsCommonApi.parse_booking_response(hotel_id, confirm_no, operation_response)
    }
  end

  # Calls OWS update payment method to change payment method on reservation information
  def self.update_payment_method(hotel_id, external_id, card_info)
    reservation_service = OwsResvAdvancedService.new(hotel_id)

    message = OwsMessage.new

    message.append_update_payment_attributes(hotel_id, external_id, card_info)

    response = reservation_service.update_method_of_payment(message)
    operation_response = response.xpath('//UpdateMethodOfPaymentResponse')

<<<<<<< HEAD
    update_payment_data = {}
    result = handle_response(operation_response, update_payment_data)
=======
    handle_response(operation_response)
>>>>>>> 20350093e353255677d19f8a84d0c9b3becae197
  end

  # Calls OWS guest requests to comments on reservation
  def self.guest_comment_requests(hotel_id, confirm_no, action_type, comments)
    reservation_service = OwsReservationService.new(hotel_id)

    message = OwsMessage.new

    message.append_comment_attributes(hotel_id, confirm_no, action_type, comments)

    response = reservation_service.guest_requests(message)
    operation_response = response.xpath('//GuestRequestsResponse')

<<<<<<< HEAD
    update_comment_data = []
    update_comment_data = OwsCommonApi.parse_comments_response(hotel_id, operation_response.xpath('GuestRequests'))
    result = handle_response(operation_response, update_comment_data)
=======
    handle_response operation_response, lambda {
      OwsCommonApi.parse_comments_response(hotel_id, operation_response.xpath('GuestRequests'))
    }
>>>>>>> 20350093e353255677d19f8a84d0c9b3becae197
  end

end
